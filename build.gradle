plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id "io.github.juuxel.loom-quiltflower" version "1.7.+"
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.+'
}

archivesBaseName = project.archives_base_name
version = "$mod_version+build.$build_number-${libs.versions.minecraft.get()}-EXPERIMENTAL"
group = maven_group

repositories {
    mavenCentral()
    maven { url = "https://maven.parchmentmc.org" }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    accessWidenerPath = file("src/main/resources/artifice.accesswidener")
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-1.19.2:${libs.versions.parchment.get()}@zip") //update to 1.19.3 version when available
        it.officialMojangMappings()
    }
    modImplementation libs.fabric.loader

    modApi (libs.bundles.fabric)

    testmodImplementation sourceSets.main.output
}

Properties properties = new Properties()
properties.put("total_version", version)

task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out variables like \$project.version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand(properties)
    }
    destinationDir = rootDir
}
publish.dependsOn updateTemplate

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
    it.options.encoding = 'UTF-8'
}

compileJava {
    options.compilerArgs += '--enable-preview'
}

jar {
    from('LICENSE') {
        rename {
            "${it}_$archivesBaseName"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        if (project.hasProperty("siphalorMavenUser")) {
            maven {
                name = "Siphalor"
                url = "https://maven.siphalor.de/upload.php"
                credentials {
                    username = siphalorMavenUser
                    password = siphalorMavenPassword
                }
            }
        }
    }
}