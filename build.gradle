plugins {
    id 'babric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id "io.github.juuxel.loom-quiltflower" version "1.7.+"
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.+'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = "$project.mod_version+mc.$project.minecraft_version"
group = project.maven_group

loom {
	gluedMinecraftJar()
	customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
    // accessWidenerPath = file("src/main/resources/artifice.accesswidener")
}

repositories {
    // Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// Used for the fabric toolchain in this project.
	maven {
		name = 'Babric'
		url = 'https://maven.glass-launcher.net/babric'
	}
	// Used for mappings.
	maven {
		name = 'Glass Releases'
		url = 'https://maven.glass-launcher.net/releases'
	}
	// Used for StationAPI and HowManyItems.
	maven {
		name = 'Glass Snapshots'
		url = 'https://maven.glass-launcher.net/snapshots'
	}
	// Used for a StationAPI dependency.
	maven {
		name = 'Froge'
		url 'https://maven.minecraftforge.net/'
	}
	// Used for projects that do not have a maven repository, but do have a GitHub repository with working build scripts.
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
	// Used for another StationAPI dependency
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	mavenCentral()
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    // To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.glasslauncher:bin:${project.yarn_mappings}"
	modImplementation "babric:fabric-loader:${project.loader_version}"

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2'

	modImplementation "net.modificationstation:StationAPI:${project.stapi_version}"

	// Optional, but convenient mods for mod creators and users alike.
	modImplementation("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {
		transitive false
	}
	modImplementation("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {
		transitive false
	}
	modImplementation("net.glasslauncher:HowManyItems-Fabric-Unofficial:${project.howmanyitems_version}") {
		transitive false
	}

    testmodImplementation sourceSets.main.output
}

Properties properties = new Properties()
properties.put("total_version", version)
properties.put("mc_version", project.minecraft_version)

task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out variables like \$project.version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand(properties)
    }
    destinationDir = rootDir
}

publish.dependsOn updateTemplate

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
    it.options.encoding = 'UTF-8'
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        if (project.hasProperty("siphalorMavenUser")) {
            maven {
                name = "Siphalor"
                url = "https://maven.siphalor.de/upload.php"
                credentials {
                    username = siphalorMavenUser
                    password = siphalorMavenPassword
                }
            }
        }
    }
}